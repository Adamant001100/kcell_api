{"version":3,"sources":["components/history/history.js","components/audioRecorder/audioRecorder.js","components/transcription/transcription.js","App.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","date","App","useState","data","setData","useEffect","axios","get","headers","then","a","res","Papa","parse","config","arr","converter","className","renderUsers","setDataSource","bordered","style","paddingRight","paddingLeft","textAlign","height","dataSource","map","i","index","ob","Object","keys","forEach","key","url","width","playing","controls","filter","length","uid","type","client","account","via","start","wait","duration","record","all","delimiter","newline","quoteChar","escapeChar","header","transformHeader","undefined","dynamicTyping","preview","encoding","worker","comments","step","complete","error","download","downloadRequestHeaders","downloadRequestBody","skipEmptyLines","chunk","chunkSize","fastMode","beforeFirstChunk","withCredentials","transform","delimitersToGuess","RECORD_SEP","UNIT_SEP","audioRecorder","transcription","to","exact","path","component","History","AudioRecorder","Transcription","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.71609d41.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Papa from \"papaparse\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Table } from \"antd\";\r\nimport ReactPlayer from \"react-player\";\r\n//import { Transcripteditor } from \"@bbc/react-transcript-editor\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Клиент\",\r\n    dataIndex: \"client\",\r\n  },\r\n\r\n  {\r\n    title: \"Ожидание\",\r\n    dataIndex: \"wait\",\r\n  },\r\n\r\n  {\r\n    title: \"Длительность\",\r\n    dataIndex: \"duration\",\r\n    date: \"\",\r\n  },\r\n\r\n  {\r\n    title: \"Запись\",\r\n    dataIndex: \"record\",\r\n  },\r\n\r\n  {\r\n    title: \"Транскрибация\",\r\n    dataIndex: \"audio2text\",\r\n  },\r\n];\r\n\r\nconst url =\r\n  \"https://digitalagent.vpbx.kcell.kz/sys/crm_api.wcgp?cmd=history&period=last_month&token=d32014d6-1d7d-4c80-bd10-f9108aa8f22c\";\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n      .then(async (res) => {\r\n        const arr = await Papa.parse(res.data, config);\r\n        setData(converter(arr.data));\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n     \r\n\r\n      {/*<button onClick={handleClick}>Click</button>*/}\r\n\r\n      {data && renderUsers(setDataSource(data))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst renderUsers = (arr) =>\r\n  arr && (\r\n    <Table\r\n      columns={columns}\r\n      bordered\r\n      style={{\r\n        paddingRight: 40,\r\n        paddingLeft: 40,\r\n        textAlign: \"center\",\r\n        height: 0,\r\n      }}\r\n      dataSource={arr}\r\n    />\r\n  );\r\n\r\n////////////////////////////////////////////////////////////////////\r\nconst setDataSource = (arr) => {\r\n  return arr.map((i, index) => {\r\n    let ob = {};\r\n    Object.keys(i).forEach((key) => {\r\n      if (key === \"record\") {\r\n        ob = {\r\n          ...ob,\r\n          [key]: (\r\n            <ReactPlayer\r\n              url={i[key]}\r\n              width=\"300px\"\r\n              height=\"30px\"\r\n              playing={false}\r\n              controls={true}\r\n            />\r\n          ),\r\n        };\r\n\r\n        //===============================================//\r\n\r\n        //===============================================//\r\n      } else {\r\n        ob = { ...ob, [key]: i[key] };\r\n      }\r\n    });\r\n\r\n    return { ...ob, key: index };\r\n  });\r\n};\r\n\r\nconst converter = (arr) => {\r\n  let data = arr.filter((i) => i.length > 0);\r\n\r\n  return data.map((i) => ({\r\n    uid: i[0],\r\n    type: i[1],\r\n    client: i[2],\r\n    account: i[3],\r\n    via: i[4],\r\n    start: i[5],\r\n    wait: i[6],\r\n    duration: i[7],\r\n    record: i[8],\r\n    all: i[9],\r\n  }));\r\n};\r\n\r\nconst config = {\r\n  delimiter: \"\", // auto-detect\r\n  newline: \"\", // auto-detect\r\n  quoteChar: '\"',\r\n  escapeChar: '\"',\r\n  header: false,\r\n  transformHeader: undefined,\r\n  dynamicTyping: false,\r\n  preview: 0,\r\n  encoding: \"\",\r\n  worker: false,\r\n  comments: false,\r\n  step: undefined,\r\n  complete: undefined,\r\n  error: undefined,\r\n  download: false,\r\n  downloadRequestHeaders: undefined,\r\n  downloadRequestBody: undefined,\r\n  skipEmptyLines: false,\r\n  chunk: undefined,\r\n  chunkSize: undefined,\r\n  fastMode: undefined,\r\n  beforeFirstChunk: undefined,\r\n  withCredentials: undefined,\r\n  transform: undefined,\r\n  delimitersToGuess: [\",\", \"\\t\", \"|\", \";\", Papa.RECORD_SEP, Papa.UNIT_SEP],\r\n};\r\n","import React from 'react'\r\n\r\nconst audioRecorder = () => {\r\n    return (\r\n        <div>\r\n            Аудиозапись\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default audioRecorder\r\n","import React from 'react'\r\n\r\nconst transcription = () => {\r\n    return (\r\n        <div>\r\n            Транскрипция текста\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default transcription\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport History from \"./components/history/history\";\nimport AudioRecorder from \"./components/audioRecorder/audioRecorder\";\nimport Transcription from \"./components/transcription/transcription\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <h1>Call-Центр</h1>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <ul className=\"navbar-nav mr-auto\">\n              <br />\n              <li>\n                <Link to={\"/history\"}> История звонков Kcell </Link>\n              </li>\n            </ul>\n          </nav>\n          <hr />\n          <Switch>\n            <Route exact path=\"/history\" component={History} />\n            <Route path=\"/AudioRecorder\" component={AudioRecorder} />\n            <Route path=\"/Transcription\" component={Transcription} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  \n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}